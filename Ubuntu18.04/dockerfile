# 仮想化するベースOS
FROM ubuntu:18.04
# 誰が作ったかは入れておきましょう
LABEL maintainer="amano123"

# 各環境変数を設定
ENV USER "amano"
ENV HOME /home/${USER}
ENV DEBCONF_NOWARNINGS yes
ENV SHELL /usr/bin/zsh
ENV UBUNTU_CONTAINER_NAME ubuntu18.04_02

# 設定ファイルをコピー
## python
COPY ./python3/library/library.txt /

# サーバーを日本のサーバーに変更
RUN sed -i 's@archive.ubuntu.com@ftp.jaist.ac.jp/pub/Linux@g' /etc/apt/sources.list

RUN set -x \
&&  apt-get update -y\
&&  apt upgrade -y --no-install-recommends\
&&  apt-get install -y --no-install-recommends \
                sudo \
		zsh \
                neovim \
                git \
		wget \
		curl \
		build-essential \
		gcc \
		cmake \
		libboost-dev \
                ## python3 
                python3 \
                python3-pip \
		python3-dev \
                iputils-ping \
                ## network
                net-tools \
                ## japanese
                language-pack-ja-base \
                language-pack-ja \
		libssl-dev \
		libffi-dev

# 日本語化
RUN locale-gen ja_JP.UTF-8 
ENV LANG ja_JP.UTF-8
ENV LC_CTYPE ja_JP.UTF-8
RUN localedef -f UTF-8 -i ja_JP ja_JP.utf8

# USER
RUN echo "root:root" | chpasswd && \
    adduser --disabled-password --gecos "" "${USER}" && \
    echo "${USER}:${USER}" | chpasswd && \
    echo "%${USER} ALL=(ALL)   NOPASSWD: ALL" >> /etc/sudoers.d/${USER} && \
    chmod 0440 /etc/sudoers.d/${USER} 

# jumanpp
#COPY analysis/jumanpp-2.0/ ${HOME}/jumanpp/

# juman pp
#WORKDIR ${HOME}/jumanpp/
#RUN cat jumanpp-2.0-* >> jumanpp-2.0.0-rc2.tar.xz && \
RUN wget https://github.com/ku-nlp/jumanpp/releases/download/v2.0.0-rc2/jumanpp-2.0.0-rc2.tar.xz && \
    tar Jxfv jumanpp-2.0.0-rc2.tar.xz && \
    cd jumanpp-2.0.0-rc2/ && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/ && \
    make && \
    make install

WORKDIR ${HOME}
RUN rm -rf ${HOME}/jumanpp 

# python3 → python
RUN set -x \
&& ln -s /usr/bin/python3 /usr/bin/python \
# pip3 → pip
&&  ln -s /usr/bin/pip3 /usr/bin/pip \
&&  apt-get -y clean \
&&  rm -rf /var/lib/apt/lists/* \
# Pythonのライブラリ追加
&&  python3 -m pip --no-cache-dir install --upgrade pip \
&&  pip3 --no-cache-dir install -I setuptools \
&&  python3 -m pip --no-cache-dir install --upgrade tensorflow nodejs gensim elasticsearch six sklearn pyknp sudachipy sudachidict_core \
&&  pip3 --no-cache-dir install -Ir /library.txt \
&&  rm -rf /library.txt

RUN touch /etc/ld.so.conf \
&& echo include /usr/local/lib > /etc/ld.so.conf \
&& ldconfig

#SVM_perf
RUN wget http://download.joachims.org/svm_perf/current/svm_perf.tar.gz \ 
&& mkdir svm_perf \
&& tar zxvf svm_perf.tar.gz -C svm_perf \
&& cd svm_perf \
	&& make \
	&& cp svm_perf_classify /usr/local/bin \
	&& cp svm_perf_learn /usr/local/bin

## zsh
COPY .zshrc ${HOME}

# 以降のRUN/CMDを実行するユーザー
USER ${USER}

# 以降の作業ディレクトリを指定
WORKDIR ${HOME}

CMD ["/bin/zsh"]
